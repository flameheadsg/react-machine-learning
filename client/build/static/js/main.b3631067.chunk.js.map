{"version":3,"sources":["components/KnnScreen.js","components/App.js","serviceWorker.js","index.js"],"names":["KnnScreen","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","testSize","k","knn","bind","assertThisInitialized","handleTestSize","handleK","axios","post","parseInt","e","setState","target","value","react_default","a","createElement","style","styles","main","fontSize","display","justifyContent","onChange","paddingLeft","onClick","transform","Component","width","marginTop","padding","color","backgroundColor","borderRadius","App","className","KnnScreen_KnnScreen","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTAGqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,SAAU,EACVC,EAAG,GAGLT,EAAKU,IAAMV,EAAKU,IAAIC,KAATV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACXA,EAAKa,eAAiBb,EAAKa,eAAeF,KAApBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACtBA,EAAKc,QAAUd,EAAKc,QAAQH,KAAbV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAVEA,6LAcXe,IAAMC,KAAK,6BAA8B,CAC7CR,SAAUS,SAASd,KAAKI,MAAMC,UAC9BC,EAAGQ,SAASd,KAAKI,MAAME,8IAIZS,GACbf,KAAKgB,SAAS,CAAEX,SAAUU,EAAEE,OAAOC,wCAG7BH,GACNf,KAAKgB,SAAS,CAAEV,EAAGS,EAAEE,OAAOC,yCAI5B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAOC,EAAOC,MACjBL,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAACG,SAAU,SAEjB,qOAMJN,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACI,QAAS,OAAQC,eAAgB,WAC5CR,EAAAC,EAAAC,cAAA,8CACAF,EAAAC,EAAAC,cAAA,SACEH,MAAOlB,KAAKI,MAAMC,SAClBuB,SAAU5B,KAAKU,eACfY,MAAO,CAACG,SAAU,OAAQI,YAAa,OAG3CV,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACI,QAAS,OAAQC,eAAgB,WAC5CR,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,SACEH,MAAOlB,KAAKI,MAAME,EAClBsB,SAAU5B,KAAKW,QACfW,MAAO,CAACG,SAAU,OAAQI,YAAa,OAG3CV,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAA,UAAQS,QAAS9B,KAAKO,IAAKe,MAAO,CAACS,UAAW,eAA9C,oBA5D+BC,aAoEjCT,EAAS,CACbC,KAAM,CACJS,MAAO,IACPP,QAAS,eACTQ,UAAW,IACXC,QAAS,GACTC,MAAO,kBACPC,gBAAiB,qBACjBC,aAAc,ICjEHC,mLARX,OACEpB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,OACbrB,EAAAC,EAAAC,cAACoB,EAAD,CAAWnB,MAAO,CAACI,QAAS,0BAJlBM,aCQEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b3631067.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nexport default class KnnScreen extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      testSize: 0,\n      k: 0\n    };\n\n    this.knn = this.knn.bind(this);\n    this.handleTestSize = this.handleTestSize.bind(this);\n    this.handleK = this.handleK.bind(this);\n  }\n\n  async knn() {\n    await axios.post('http://localhost:5000/knn/', {\n      testSize: parseInt(this.state.testSize),\n      k: parseInt(this.state.k)\n    });\n  }\n\n  handleTestSize(e) {\n    this.setState({ testSize: e.target.value });\n  }\n\n  handleK(e) {\n    this.setState({ k: e.target.value });\n  }\n\n  render() {\n    return (\n      <div style={styles.main}>\n        <h2>K-Nearest-Neighbor (KNN)</h2>\n        <hr />\n        <p style={{fontSize: \"22px\"}}>\n          {\n            \"The K-Nearest-Neighbor algorithm makes predictions by averaging \" +\n            'the values of the \"k\" closest points in a data set. Below you can ' +\n            'experiment with different test set sizes (out of 50 records total) ' +\n            'and different values of \"k.\"'\n          }\n        </p>\n        <div style={{display: \"flex\", justifyContent: \"center\"}}>\n          <p>Size of Test Set:&nbsp;&nbsp;&nbsp;&nbsp;</p>\n          <input\n            value={this.state.testSize}\n            onChange={this.handleTestSize}\n            style={{fontSize: \"16px\", paddingLeft: 10}}\n          />\n        </div>\n        <br />\n        <div style={{display: \"flex\", justifyContent: \"center\"}}>\n          <p>Value of K:&nbsp;&nbsp;&nbsp;&nbsp;</p>\n          <input\n            value={this.state.k}\n            onChange={this.handleK}\n            style={{fontSize: \"16px\", paddingLeft: 10}}\n          />\n        </div>\n        <br /><br />\n        <button onClick={this.knn} style={{transform: \"scale(1.6)\"}}>\n          Test KNN\n        </button>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  main: {\n    width: 800,\n    display: \"inline-block\",\n    marginTop: 100,\n    padding: 40,\n    color: \"rgb(0, 61, 112)\",\n    backgroundColor: \"rgb(193, 227, 255)\",\n    borderRadius: 7\n  }\n};\n","import React, { Component } from 'react';\nimport '../App.css';\nimport KnnScreen from './KnnScreen';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <KnnScreen style={{display: \"inline-block\"}}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}