{"ast":null,"code":"import _classCallCheck from \"/Users/flameheadsg/Desktop/Projects/play/react-machine-learning/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\nrequire('@tensorflow/tfjs-node');\n\nvar tf = require('@tensorflow/tfjs');\n\nvar loadCSV = require('./load-csv');\n\nvar Knn = function Knn() {\n  _classCallCheck(this, Knn);\n\n  var _loadCSV = loadCSV('./data/kc_house_data.csv', {\n    shuffle: true,\n    splitTest: 10,\n    dataColumns: ['sqft_lot', 'bedrooms', 'bathrooms'],\n    labelColumns: ['price']\n  }),\n      features = _loadCSV.features,\n      labels = _loadCSV.labels,\n      testFeatures = _loadCSV.testFeatures,\n      testLabels = _loadCSV.testLabels;\n\n  this.features = tf.tensor(features);\n  this.labels = tf.tensor(labels);\n} // knn = (features, labels, predictionPoint, k) => {\n//   const { mean, variance } = tf.moments(features, 0);\n//   const scaledPrediction = predictionPoint.sub(mean).div(variance.pow(0.5));\n//\n//   return features\n//     .sub(mean)\n//     .div(variance.pow(0.5))\n//     .sub(scaledPrediction)\n//     .pow(2)\n//     .sum(1)\n//     .pow(0.5)\n//     .expandDims(1)\n//     .concat(labels, 1)\n//     .unstack()\n//     .sort((a, b) => a.get(0) > b.get(0) ? 1 : -1)\n//     .slice(0, k)\n//     .reduce((acc, pair) => acc + pair.get(1), 0) / k;\n// }\n//\n// test = () => {\n//   this.testFeatures.forEach((testPoint, i) => {\n//     const result = knn(features, labels, tf.tensor(testPoint), 10);\n//     const err = (testLabels[i][0] - result) / testLabels[i][0] * 100;\n//     console.log('Error:', err + \"%\");\n//   });\n// }\n;\n\nmodule.exports = Knn;","map":{"version":3,"sources":["/Users/flameheadsg/Desktop/Projects/play/react-machine-learning/src/tfjs/Knn.js"],"names":["require","tf","loadCSV","Knn","shuffle","splitTest","dataColumns","labelColumns","features","labels","testFeatures","testLabels","tensor","module","exports"],"mappings":";;AAAAA,OAAO,CAAC,uBAAD,CAAP;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,kBAAD,CAAlB;;AACA,IAAME,OAAO,GAAGF,OAAO,CAAC,YAAD,CAAvB;;IAEMG,G,GACJ,eAAc;AAAA;;AAAA,iBACyCD,OAAO,CAAC,0BAAD,EAA6B;AACvFE,IAAAA,OAAO,EAAE,IAD8E;AAEvFC,IAAAA,SAAS,EAAE,EAF4E;AAGvFC,IAAAA,WAAW,EAAE,CACX,UADW,EAEX,UAFW,EAGX,WAHW,CAH0E;AAQvFC,IAAAA,YAAY,EAAE,CAAC,OAAD;AARyE,GAA7B,CADhD;AAAA,MACNC,QADM,YACNA,QADM;AAAA,MACIC,MADJ,YACIA,MADJ;AAAA,MACYC,YADZ,YACYA,YADZ;AAAA,MAC0BC,UAD1B,YAC0BA,UAD1B;;AAYZ,OAAKH,QAAL,GAAgBP,EAAE,CAACW,MAAH,CAAUJ,QAAV,CAAhB;AACA,OAAKC,MAAL,GAAcR,EAAE,CAACW,MAAH,CAAUH,MAAV,CAAd;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGFI,MAAM,CAACC,OAAP,GAAiBX,GAAjB","sourcesContent":["require('@tensorflow/tfjs-node');\nconst tf = require('@tensorflow/tfjs');\nconst loadCSV = require('./load-csv');\n\nclass Knn {\n  constructor() {\n    let { features, labels, testFeatures, testLabels } = loadCSV('./data/kc_house_data.csv', {\n      shuffle: true,\n      splitTest: 10,\n      dataColumns: [\n        'sqft_lot',\n        'bedrooms',\n        'bathrooms'\n      ],\n      labelColumns: ['price']\n    });\n\n    this.features = tf.tensor(features);\n    this.labels = tf.tensor(labels);\n  }\n\n  // knn = (features, labels, predictionPoint, k) => {\n  //   const { mean, variance } = tf.moments(features, 0);\n  //   const scaledPrediction = predictionPoint.sub(mean).div(variance.pow(0.5));\n  //\n  //   return features\n  //     .sub(mean)\n  //     .div(variance.pow(0.5))\n  //     .sub(scaledPrediction)\n  //     .pow(2)\n  //     .sum(1)\n  //     .pow(0.5)\n  //     .expandDims(1)\n  //     .concat(labels, 1)\n  //     .unstack()\n  //     .sort((a, b) => a.get(0) > b.get(0) ? 1 : -1)\n  //     .slice(0, k)\n  //     .reduce((acc, pair) => acc + pair.get(1), 0) / k;\n  // }\n  //\n  // test = () => {\n  //   this.testFeatures.forEach((testPoint, i) => {\n  //     const result = knn(features, labels, tf.tensor(testPoint), 10);\n  //     const err = (testLabels[i][0] - result) / testLabels[i][0] * 100;\n  //     console.log('Error:', err + \"%\");\n  //   });\n  // }\n}\n\nmodule.exports = Knn;\n"]},"metadata":{},"sourceType":"module"}