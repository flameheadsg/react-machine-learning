{"ast":null,"code":"import _classCallCheck from \"/Users/flameheadsg/Desktop/Projects/play/react-machine-learning/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\nrequire('@tensorflow/tfjs-node');\n\nvar tf = require('@tensorflow/tfjs');\n\nvar loadCSV = require('./load-csv');\n\nvar Knn = function Knn() {\n  var _this = this;\n\n  _classCallCheck(this, Knn);\n\n  this.test = function () {\n    _this.testFeatures.forEach(function (testPoint, i) {\n      var result = _this.knn(_this.features, _this.labels, tf.tensor(testPoint), 10);\n\n      var err = (_this.testLabels[i][0] - result) / _this.testLabels[i][0] * 100;\n      console.log('Error:', err + \"%\");\n    });\n  };\n\n  var _loadCSV = loadCSV('./data/kc_house_data.csv', {\n    shuffle: true,\n    splitTest: 10,\n    dataColumns: ['sqft_lot', 'bedrooms', 'bathrooms'],\n    labelColumns: ['price']\n  }),\n      features = _loadCSV.features,\n      labels = _loadCSV.labels,\n      testFeatures = _loadCSV.testFeatures,\n      testLabels = _loadCSV.testLabels;\n\n  this.features = tf.tensor(features);\n  this.labels = tf.tensor(labels);\n  this.testFeatures = testFeatures;\n  this.testLabels = testLabels;\n} // knn = (features, labels, predictionPoint, k) => {\n//   const { mean, variance } = tf.moments(features, 0);\n//   const scaledPrediction = predictionPoint.sub(mean).div(variance.pow(0.5));\n//\n//   return features\n//     .sub(mean)\n//     .div(variance.pow(0.5))\n//     .sub(scaledPrediction)\n//     .pow(2)\n//     .sum(1)\n//     .pow(0.5)\n//     .expandDims(1)\n//     .concat(labels, 1)\n//     .unstack()\n//     .sort((a, b) => a.get(0) > b.get(0) ? 1 : -1)\n//     .slice(0, k)\n//     .reduce((acc, pair) => acc + pair.get(1), 0) / k;\n// }\n;\n\nmodule.exports = Knn;","map":{"version":3,"sources":["/Users/flameheadsg/Desktop/Projects/play/react-machine-learning/src/tfjs/Knn.js"],"names":["require","tf","loadCSV","Knn","test","testFeatures","forEach","testPoint","i","result","knn","features","labels","tensor","err","testLabels","console","log","shuffle","splitTest","dataColumns","labelColumns","module","exports"],"mappings":";;AAAAA,OAAO,CAAC,uBAAD,CAAP;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,kBAAD,CAAlB;;AACA,IAAME,OAAO,GAAGF,OAAO,CAAC,YAAD,CAAvB;;IAEMG,G,GACJ,eAAc;AAAA;;AAAA;;AAAA,OAqCdC,IArCc,GAqCP,YAAM;AACX,IAAA,KAAI,CAACC,YAAL,CAAkBC,OAAlB,CAA0B,UAACC,SAAD,EAAYC,CAAZ,EAAkB;AAC1C,UAAMC,MAAM,GAAG,KAAI,CAACC,GAAL,CAAS,KAAI,CAACC,QAAd,EAAwB,KAAI,CAACC,MAA7B,EAAqCX,EAAE,CAACY,MAAH,CAAUN,SAAV,CAArC,EAA2D,EAA3D,CAAf;;AACA,UAAMO,GAAG,GAAG,CAAC,KAAI,CAACC,UAAL,CAAgBP,CAAhB,EAAmB,CAAnB,IAAwBC,MAAzB,IAAmC,KAAI,CAACM,UAAL,CAAgBP,CAAhB,EAAmB,CAAnB,CAAnC,GAA2D,GAAvE;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,GAAG,GAAG,GAA5B;AACD,KAJD;AAKD,GA3Ca;;AAAA,iBACyCZ,OAAO,CAAC,0BAAD,EAA6B;AACvFgB,IAAAA,OAAO,EAAE,IAD8E;AAEvFC,IAAAA,SAAS,EAAE,EAF4E;AAGvFC,IAAAA,WAAW,EAAE,CACX,UADW,EAEX,UAFW,EAGX,WAHW,CAH0E;AAQvFC,IAAAA,YAAY,EAAE,CAAC,OAAD;AARyE,GAA7B,CADhD;AAAA,MACNV,QADM,YACNA,QADM;AAAA,MACIC,MADJ,YACIA,MADJ;AAAA,MACYP,YADZ,YACYA,YADZ;AAAA,MAC0BU,UAD1B,YAC0BA,UAD1B;;AAYZ,OAAKJ,QAAL,GAAgBV,EAAE,CAACY,MAAH,CAAUF,QAAV,CAAhB;AACA,OAAKC,MAAL,GAAcX,EAAE,CAACY,MAAH,CAAUD,MAAV,CAAd;AACA,OAAKP,YAAL,GAAoBA,YAApB;AACA,OAAKU,UAAL,GAAkBA,UAAlB;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAWFO,MAAM,CAACC,OAAP,GAAiBpB,GAAjB","sourcesContent":["require('@tensorflow/tfjs-node');\nconst tf = require('@tensorflow/tfjs');\nconst loadCSV = require('./load-csv');\n\nclass Knn {\n  constructor() {\n    let { features, labels, testFeatures, testLabels } = loadCSV('./data/kc_house_data.csv', {\n      shuffle: true,\n      splitTest: 10,\n      dataColumns: [\n        'sqft_lot',\n        'bedrooms',\n        'bathrooms'\n      ],\n      labelColumns: ['price']\n    });\n\n    this.features = tf.tensor(features);\n    this.labels = tf.tensor(labels);\n    this.testFeatures = testFeatures;\n    this.testLabels = testLabels;\n  }\n\n  // knn = (features, labels, predictionPoint, k) => {\n  //   const { mean, variance } = tf.moments(features, 0);\n  //   const scaledPrediction = predictionPoint.sub(mean).div(variance.pow(0.5));\n  //\n  //   return features\n  //     .sub(mean)\n  //     .div(variance.pow(0.5))\n  //     .sub(scaledPrediction)\n  //     .pow(2)\n  //     .sum(1)\n  //     .pow(0.5)\n  //     .expandDims(1)\n  //     .concat(labels, 1)\n  //     .unstack()\n  //     .sort((a, b) => a.get(0) > b.get(0) ? 1 : -1)\n  //     .slice(0, k)\n  //     .reduce((acc, pair) => acc + pair.get(1), 0) / k;\n  // }\n\n  test = () => {\n    this.testFeatures.forEach((testPoint, i) => {\n      const result = this.knn(this.features, this.labels, tf.tensor(testPoint), 10);\n      const err = (this.testLabels[i][0] - result) / this.testLabels[i][0] * 100;\n      console.log('Error:', err + \"%\");\n    });\n  }\n}\n\nmodule.exports = Knn;\n"]},"metadata":{},"sourceType":"module"}