{"ast":null,"code":"import _classCallCheck from \"/Users/flameheadsg/Desktop/Projects/play/react-machine-learning/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\nrequire('@tensorflow/tfjs-node');\n\nimport tf from '@tensorflow/tfjs';\nimport loadCSV from './load-csv';\n\nvar Knn = function Knn() {\n  _classCallCheck(this, Knn);\n\n  this.knn = function (features, labels, predictionPoint, k) {\n    var _tf$moments = tf.moments(features, 0),\n        mean = _tf$moments.mean,\n        variance = _tf$moments.variance;\n\n    var scaledPrediction = predictionPoint.sub(mean).div(variance.pow(0.5));\n    return features.sub(mean).div(variance.pow(0.5)).sub(scaledPrediction).pow(2).sum(1).pow(0.5).expandDims(1).concat(labels, 1).unstack().sort(function (a, b) {\n      return a.get(0) > b.get(0) ? 1 : -1;\n    }).slice(0, k).reduce(function (acc, pair) {\n      return acc + pair.get(1);\n    }, 0) / k;\n  };\n\n  this.test = function () {\n    testFeatures.forEach(function (testPoint, i) {\n      var result = knn(features, labels, tf.tensor(testPoint), 10);\n      var err = (testLabels[i][0] - result) / testLabels[i][0] * 100;\n      console.log('Error:', err + \"%\");\n    });\n  };\n\n  var _loadCSV = loadCSV('./data/kc_house_data.csv', {\n    shuffle: true,\n    splitTest: 10,\n    dataColumns: ['sqft_lot', 'bedrooms', 'bathrooms'],\n    labelColumns: ['price']\n  }),\n      _features = _loadCSV.features,\n      _labels = _loadCSV.labels,\n      _testFeatures = _loadCSV.testFeatures,\n      _testLabels = _loadCSV.testLabels;\n\n  _features = tf.tensor(_features);\n  _labels = tf.tensor(_labels);\n};\n\nexport { Knn as default };","map":{"version":3,"sources":["/Users/flameheadsg/Desktop/Projects/play/react-machine-learning/src/tfjs/Knn.js"],"names":["require","tf","loadCSV","Knn","knn","features","labels","predictionPoint","k","moments","mean","variance","scaledPrediction","sub","div","pow","sum","expandDims","concat","unstack","sort","a","b","get","slice","reduce","acc","pair","test","testFeatures","forEach","testPoint","i","result","tensor","err","testLabels","console","log","shuffle","splitTest","dataColumns","labelColumns"],"mappings":";;AAAAA,OAAO,CAAC,uBAAD,CAAP;;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,OAAP,MAAoB,YAApB;;IAEqBC,G,GACnB,eAAc;AAAA;;AAAA,OAgBdC,GAhBc,GAgBR,UAACC,QAAD,EAAWC,MAAX,EAAmBC,eAAnB,EAAoCC,CAApC,EAA0C;AAAA,sBACnBP,EAAE,CAACQ,OAAH,CAAWJ,QAAX,EAAqB,CAArB,CADmB;AAAA,QACtCK,IADsC,eACtCA,IADsC;AAAA,QAChCC,QADgC,eAChCA,QADgC;;AAE9C,QAAMC,gBAAgB,GAAGL,eAAe,CAACM,GAAhB,CAAoBH,IAApB,EAA0BI,GAA1B,CAA8BH,QAAQ,CAACI,GAAT,CAAa,GAAb,CAA9B,CAAzB;AAEA,WAAOV,QAAQ,CACZQ,GADI,CACAH,IADA,EAEJI,GAFI,CAEAH,QAAQ,CAACI,GAAT,CAAa,GAAb,CAFA,EAGJF,GAHI,CAGAD,gBAHA,EAIJG,GAJI,CAIA,CAJA,EAKJC,GALI,CAKA,CALA,EAMJD,GANI,CAMA,GANA,EAOJE,UAPI,CAOO,CAPP,EAQJC,MARI,CAQGZ,MARH,EAQW,CARX,EASJa,OATI,GAUJC,IAVI,CAUC,UAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUD,CAAC,CAACE,GAAF,CAAM,CAAN,IAAWD,CAAC,CAACC,GAAF,CAAM,CAAN,CAAX,GAAsB,CAAtB,GAA0B,CAAC,CAArC;AAAA,KAVD,EAWJC,KAXI,CAWE,CAXF,EAWKhB,CAXL,EAYJiB,MAZI,CAYG,UAACC,GAAD,EAAMC,IAAN;AAAA,aAAeD,GAAG,GAAGC,IAAI,CAACJ,GAAL,CAAS,CAAT,CAArB;AAAA,KAZH,EAYqC,CAZrC,IAY0Cf,CAZjD;AAaD,GAjCa;;AAAA,OAmCdoB,IAnCc,GAmCP,YAAM;AACXC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAACC,SAAD,EAAYC,CAAZ,EAAkB;AACrC,UAAMC,MAAM,GAAG7B,GAAG,CAACC,QAAD,EAAWC,MAAX,EAAmBL,EAAE,CAACiC,MAAH,CAAUH,SAAV,CAAnB,EAAyC,EAAzC,CAAlB;AACA,UAAMI,GAAG,GAAG,CAACC,UAAU,CAACJ,CAAD,CAAV,CAAc,CAAd,IAAmBC,MAApB,IAA8BG,UAAU,CAACJ,CAAD,CAAV,CAAc,CAAd,CAA9B,GAAiD,GAA7D;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,GAAG,GAAG,GAA5B;AACD,KAJD;AAKD,GAzCa;;AAAA,iBACyCjC,OAAO,CAAC,0BAAD,EAA6B;AACvFqC,IAAAA,OAAO,EAAE,IAD8E;AAEvFC,IAAAA,SAAS,EAAE,EAF4E;AAGvFC,IAAAA,WAAW,EAAE,CACX,UADW,EAEX,UAFW,EAGX,WAHW,CAH0E;AAQvFC,IAAAA,YAAY,EAAE,CAAC,OAAD;AARyE,GAA7B,CADhD;AAAA,MACNrC,SADM,YACNA,QADM;AAAA,MACIC,OADJ,YACIA,MADJ;AAAA,MACYuB,aADZ,YACYA,YADZ;AAAA,MAC0BO,WAD1B,YAC0BA,UAD1B;;AAYZ/B,EAAAA,SAAQ,GAAGJ,EAAE,CAACiC,MAAH,CAAU7B,SAAV,CAAX;AACAC,EAAAA,OAAM,GAAGL,EAAE,CAACiC,MAAH,CAAU5B,OAAV,CAAT;AACD,C;;SAfkBH,G","sourcesContent":["require('@tensorflow/tfjs-node');\nimport tf from '@tensorflow/tfjs';\nimport loadCSV from './load-csv';\n\nexport default class Knn {\n  constructor() {\n    let { features, labels, testFeatures, testLabels } = loadCSV('./data/kc_house_data.csv', {\n      shuffle: true,\n      splitTest: 10,\n      dataColumns: [\n        'sqft_lot',\n        'bedrooms',\n        'bathrooms'\n      ],\n      labelColumns: ['price']\n    });\n\n    features = tf.tensor(features);\n    labels = tf.tensor(labels);\n  }\n\n  knn = (features, labels, predictionPoint, k) => {\n    const { mean, variance } = tf.moments(features, 0);\n    const scaledPrediction = predictionPoint.sub(mean).div(variance.pow(0.5));\n\n    return features\n      .sub(mean)\n      .div(variance.pow(0.5))\n      .sub(scaledPrediction)\n      .pow(2)\n      .sum(1)\n      .pow(0.5)\n      .expandDims(1)\n      .concat(labels, 1)\n      .unstack()\n      .sort((a, b) => a.get(0) > b.get(0) ? 1 : -1)\n      .slice(0, k)\n      .reduce((acc, pair) => acc + pair.get(1), 0) / k;\n  }\n\n  test = () => {\n    testFeatures.forEach((testPoint, i) => {\n      const result = knn(features, labels, tf.tensor(testPoint), 10);\n      const err = (testLabels[i][0] - result) / testLabels[i][0] * 100;\n      console.log('Error:', err + \"%\");\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}