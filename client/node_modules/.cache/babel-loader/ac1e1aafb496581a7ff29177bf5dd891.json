{"ast":null,"code":"var fs = require('fs');\n\nvar _ = require('lodash');\n\nvar shuffleSeed = require('shuffle-seed');\n\nfunction extractColumns(data, columnNames) {\n  var headers = _.first(data);\n\n  var indexes = _.map(columnNames, function (column) {\n    return headers.indexOf(column);\n  });\n\n  var extracted = _.map(data, function (row) {\n    return _.pullAt(row, indexes);\n  });\n\n  return extracted;\n}\n\nmodule.exports = function loadCSV(filename, _ref) {\n  var _ref$dataColumns = _ref.dataColumns,\n      dataColumns = _ref$dataColumns === void 0 ? [] : _ref$dataColumns,\n      _ref$labelColumns = _ref.labelColumns,\n      labelColumns = _ref$labelColumns === void 0 ? [] : _ref$labelColumns,\n      _ref$converters = _ref.converters,\n      converters = _ref$converters === void 0 ? {} : _ref$converters,\n      _ref$shuffle = _ref.shuffle,\n      shuffle = _ref$shuffle === void 0 ? false : _ref$shuffle,\n      _ref$splitTest = _ref.splitTest,\n      splitTest = _ref$splitTest === void 0 ? false : _ref$splitTest;\n  var data = fs.readFileSync(filename, {\n    encoding: 'utf-8'\n  });\n  data = _.map(data.split('\\n'), function (d) {\n    return d.split(',');\n  });\n  data = _.dropRightWhile(data, function (val) {\n    return _.isEqual(val, ['']);\n  });\n\n  var headers = _.first(data);\n\n  data = _.map(data, function (row, index) {\n    if (index === 0) {\n      return row;\n    }\n\n    return _.map(row, function (element, index) {\n      if (converters[headers[index]]) {\n        var converted = converters[headers[index]](element);\n        return _.isNaN(converted) ? element : converted;\n      }\n\n      var result = parseFloat(element.replace('\"', ''));\n      return _.isNaN(result) ? element : result;\n    });\n  });\n  var labels = extractColumns(data, labelColumns);\n  data = extractColumns(data, dataColumns);\n  data.shift();\n  labels.shift();\n\n  if (shuffle) {\n    data = shuffleSeed.shuffle(data, 'phrase');\n    labels = shuffleSeed.shuffle(labels, 'phrase');\n  }\n\n  if (splitTest) {\n    var trainSize = _.isNumber(splitTest) ? splitTest : Math.floor(data.length / 2);\n    return {\n      features: data.slice(trainSize),\n      labels: labels.slice(trainSize),\n      testFeatures: data.slice(0, trainSize),\n      testLabels: labels.slice(0, trainSize)\n    };\n  } else {\n    return {\n      features: data,\n      labels: labels\n    };\n  }\n};","map":{"version":3,"sources":["/Users/flameheadsg/Desktop/Projects/play/react-machine-learning/src/tfjs/load-csv.js"],"names":["fs","require","_","shuffleSeed","extractColumns","data","columnNames","headers","first","indexes","map","column","indexOf","extracted","row","pullAt","module","exports","loadCSV","filename","dataColumns","labelColumns","converters","shuffle","splitTest","readFileSync","encoding","split","d","dropRightWhile","val","isEqual","index","element","converted","isNaN","result","parseFloat","replace","labels","shift","trainSize","isNumber","Math","floor","length","features","slice","testFeatures","testLabels"],"mappings":"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","sourcesContent":["const fs = require('fs');\nconst _ = require('lodash');\nconst shuffleSeed = require('shuffle-seed');\n\nfunction extractColumns(data, columnNames) {\n  const headers = _.first(data);\n\n  const indexes = _.map(columnNames, column => headers.indexOf(column));\n  const extracted = _.map(data, row => _.pullAt(row, indexes));\n\n  return extracted;\n}\n\nmodule.exports = function loadCSV(\n  filename,\n  {\n    dataColumns = [],\n    labelColumns = [],\n    converters = {},\n    shuffle = false,\n    splitTest = false\n  }\n) {\n  let data = fs.readFileSync(filename, { encoding: 'utf-8' });\n  data = _.map(data.split('\\n'), d => d.split(','));\n  data = _.dropRightWhile(data, val => _.isEqual(val, ['']));\n  const headers = _.first(data);\n\n  data = _.map(data, (row, index) => {\n    if (index === 0) {\n      return row;\n    }\n    return _.map(row, (element, index) => {\n      if (converters[headers[index]]) {\n        const converted = converters[headers[index]](element);\n        return _.isNaN(converted) ? element : converted;\n      }\n\n      const result = parseFloat(element.replace('\"', ''));\n      return _.isNaN(result) ? element : result;\n    });\n  });\n\n  let labels = extractColumns(data, labelColumns);\n  data = extractColumns(data, dataColumns);\n\n  data.shift();\n  labels.shift();\n\n  if (shuffle) {\n    data = shuffleSeed.shuffle(data, 'phrase');\n    labels = shuffleSeed.shuffle(labels, 'phrase');\n  }\n\n  if (splitTest) {\n    const trainSize = _.isNumber(splitTest)\n      ? splitTest\n      : Math.floor(data.length / 2);\n\n    return {\n      features: data.slice(trainSize),\n      labels: labels.slice(trainSize),\n      testFeatures: data.slice(0, trainSize),\n      testLabels: labels.slice(0, trainSize)\n    };\n  } else {\n    return { features: data, labels };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}